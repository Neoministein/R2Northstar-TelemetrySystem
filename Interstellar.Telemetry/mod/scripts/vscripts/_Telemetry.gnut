untyped

global function ITS_init

global const ITS_WS_NAME = "Telemetry"

global const ITS_NO_MATCH = "NO_MATCH"

global const ITS_NO_BODY = "NO_BODY"

global const ITS_UNKNOWN = "UNKNOWN"

global const ITS_IGNORE_PLAYER_EVENTS_ON_STATE_DELAY = 1500

const table<int, string> ITS_GAME_STAT_TYPES = {
    [ PGS_ELIMINATED ]              = "PGS_ELIMINATED",
	[ PGS_KILLS ] 					= "PGS_KILLS",
	[ PGS_DEATHS ] 					= "PGS_DEATHS",
	[ PGS_PILOT_KILLS ] 			= "PGS_PILOT_KILLS",
	[ PGS_TITAN_KILLS ]				= "PGS_TITAN_KILLS",
	[ PGS_NPC_KILLS ] 				= "PGS_NPC_KILLS",
	[ PGS_ASSISTS ] 				= "PGS_ASSISTS",
    [ PGS_SCORE ]                   = "PGS_SCORE",
	[ PGS_ASSAULT_SCORE ] 			= "PGS_ASSAULT_SCORE",
	[ PGS_DEFENSE_SCORE ]			= "PGS_DEFENSE_SCORE",
	[ PGS_DISTANCE_SCORE ]			= "PGS_DISTANCE_SCORE",
	[ PGS_DETONATION_SCORE ]		= "PGS_DETONATION_SCORE",
}

global struct ITS_ConfigStruct {
    string northstarVersion,
    string modVersion,

    //Configuration
    string hostname,
    string apiKey,
    string tags,
    bool tls,

    int milliSecBetweenState,
    int secToWaitForBackend,

    bool recordNpc,
}

global struct ITS_Position {
    vector origin,
    vector angles,
}

struct {
    ITS_ConfigStruct& config,

    //Internal values
    bool isClientCompatible = false,
    bool isWebsocketRunning = false,

    string matchId = ITS_NO_MATCH,

    table < entity , table < int , int > > scoreData,
    table < string , ITS_Position > lastReportedPosition,
} file

void function ITS_init()
{
    file.config = ITS_LoadConfiguration();

    //Check to see if client mod is compatible with the server
    ITS_CheckForClientCompatibility()

    //Initlize callbacks for the Telemetry System
    AddCallback_GameStateEnter( eGameState.WaitingForPlayers, ITS_RegisterNewMatch )
    AddCallback_GameStateEnter( eGameState.Playing, ITS_MatchStart )
    AddCallback_GameStateEnter( eGameState.Epilogue, ITS_Score_GameFinished )
    AddCallback_GameStateEnter( eGameState.Postmatch, ITS_GameFinished )

    AddCallback_OnClientConnected( ITS_PlayerConnect )
    AddCallback_OnClientDisconnected( ITS_PlayerDisconnect )

    AddCallback_OnPilotBecomesTitan( ITS_PilotBecomesTitan )
    AddCallback_OnTitanBecomesPilot( ITS_TitanBecomesPilot )

    AddCallback_OnPlayerKilled( ITS_EntityKilled )
    AddCallback_OnNPCKilled( ITS_EntityKilled )

    AddCallback_NPCLeeched( ITS_SpectreLeeched )

    AddCallback_OnPlayerRespawned( ITS_PlayerRespawned )

    AddCallback_OnPlayerGetsNewPilotLoadout( ITS_PlayerGetsNewPilotLoadout )

    AddOnRodeoStartedCallback( ITS_EntityRodeoStart )
    AddOnRodeoEndedCallback( ITS_EntityRodeoEnd )

    AddCallback_EntityChangedTeam( "player", ITS_EntityChangedTeam )

    AddSpawnCallback("npc_titan", ITS_NpcTitanSpawn)
    AddCallback_EntityChangedTeam( "npc_titan", ITS_EntityChangedTeam )
    if (file.config.recordNpc)
    {
        AddSpawnCallback("npc_soldier", ITS_NpcWithWeaponSpawn)
        AddCallback_EntityChangedTeam("npc_soldier", ITS_EntityChangedTeam )

        AddSpawnCallback("npc_spectre", ITS_NpcWithWeaponSpawn)
        AddCallback_EntityChangedTeam("npc_spectre", ITS_EntityChangedTeam )

        AddSpawnCallback("npc_stalker", ITS_NpcWithWeaponSpawn)
        AddCallback_EntityChangedTeam("npc_stalker", ITS_EntityChangedTeam )

        AddSpawnCallback("npc_super_spectre", ITS_NpcSpawn)
        AddCallback_EntityChangedTeam("npc_super_spectre",    ITS_EntityChangedTeam )

        AddSpawnCallback("npc_drone",ITS_NpcSpawn)
        AddCallback_EntityChangedTeam("npc_drone", ITS_EntityChangedTeam )

        AddSpawnCallback("npc_dropship", ITS_NpcSpawn)
        AddCallback_EntityChangedTeam("npc_dropship", ITS_EntityChangedTeam )

        AddSpawnCallback("npc_turret_sentry", ITS_NpcSpawn)
        AddCallback_EntityChangedTeam("npc_turret_sentry", ITS_EntityChangedTeam )

        AddSpawnCallback("npc_turret_mega", ITS_NpcSpawn)
        AddCallback_EntityChangedTeam("npc_turret_mega", ITS_EntityChangedTeam )

        AddSpawnCallback("npc_dropship", ITS_NpcSpawn)
        AddCallback_EntityChangedTeam("npc_dropship", ITS_EntityChangedTeam )
    }
}

void function ITS_CheckForClientCompatibility()
{
    ITS_SendRequestToBackend("/api/client/compatibility/" + file.config.modVersion, HttpRequestMethod.GET, ITS_NO_BODY, ITS_ClientCompatibility_Success, ITS_GenericHttpFailure)
}

void function ITS_ClientCompatibility_Success(HttpRequestResponse response )
{
    file.isClientCompatible = expect bool (DecodeJSON(response.body)["compatible"])
}

void function ITS_RegisterNewMatch()
{
    table body
    body["nsServerName"] <- GetConVarString( "ns_server_name" )
    body["maxPlayers"] <- GetCurrentPlaylistVarInt( "max_players", 8 )
    body["map"] <- GetMapName()
    body["gamemode"] <- GameRules_GetGameMode()
    body["milliSecBetweenState"] <- file.config.milliSecBetweenState
    body["recordNpc"] <- file.config.recordNpc
    body["tags"] <- file.config.tags

    ITS_SendRequestToBackend("/api/v1/match/new", HttpRequestMethod.POST, EncodeJSON(body), ITS_RegisterNewMatch_Success, ITS_GenericHttpFailure)
}

void function ITS_RegisterNewMatch_Success(HttpRequestResponse response )
{
    file.matchId = expect string (DecodeJSON(response.body)["id"])

    string url = (file.config.tls ? "wss://" : "ws://") + file.config.hostname + "/ws/v1/state/input/" + file.matchId
    table<string , string > headers
    headers["Authorization"] <- "BEARER " + file.config.apiKey

    file.isWebsocketRunning = NS_ConnectToWebsocket(ITS_WS_NAME, url, ITS_WebsocketPooling, 60, false ,headers)
}

void function ITS_MatchStart()
{
    if ( file.matchId != ITS_NO_MATCH ) {
        thread ITS_MainTelemetryLoop()
    }
}

void function ITS_MainTelemetryLoop()
{
	while ( file.matchId != ITS_NO_MATCH )
	{
        {
            table playerPositionEvent
            playerPositionEvent["eventType"] <- "PlayerPosition"

            array positions
            foreach(entity player in GetPlayerArray())
            {
                table position
                position["entityId"] <- player.GetUID()
                position["health"] <- (100.0 * player.GetHealth() / player.GetMaxHealth()).tointeger()
                position["position"] <- ITS_VectorIntoTable(player.GetOrigin())
                position["rotation"] <- ITS_VectorIntoTable(player.GetAngles())
                position["velocity"] <- ITS_VectorIntoTable(player.GetVelocity())

                if (ITS_ComparePositions(player)) {
                    positions.append(position)
                }
            }
            playerPositionEvent["positions"] <- positions

            if(positions.len() > 0)
            {
                ITS_SendToWebsocket(EncodeJSON(playerPositionEvent))
            }
        }

        {
            array<string> npcTypes = ["npc_titan"]

            if(file.config.recordNpc)
            {
                npcTypes.append("npc_soldier")
                npcTypes.append("npc_spectre")
                npcTypes.append("npc_stalker")
                npcTypes.append("npc_super_spectre")
                npcTypes.append("npc_drone")
                npcTypes.append("npc_dropship")
                npcTypes.append("npc_turret_sentry")
                npcTypes.append("npc_turret_mega")
            }

            table npcPositionEvent
            npcPositionEvent["eventType"] <- "NpcPosition"

            array positions
            foreach(string npcType in npcTypes)
            {
                foreach(entity npc in GetNPCArrayByClass( npcType ))
                {
                    table position
                    position["entityId"] <- npc.GetEncodedEHandle() + ""
                    position["health"] <- (100.0 * npc.GetHealth() / npc.GetMaxHealth()).tointeger()
                    position["position"] <- ITS_VectorIntoTable(npc.GetOrigin())
                    position["rotation"] <- ITS_VectorIntoTable(npc.GetAngles())
                    position["velocity"] <- ITS_VectorIntoTable(npc.GetVelocity())

                    if (ITS_ComparePositions(npc)) {
                        positions.append(position)
                    }
                }
            }

            npcPositionEvent["positions"] <- positions

            if(positions.len() > 0)
            {
                ITS_SendToWebsocket(EncodeJSON(npcPositionEvent))
            }
        }


        ITS_SendToWebsocket(EncodeJSON({eventType = "StateEnd", timePassed = (Time() * 1000).tointeger()}))
		wait file.config.milliSecBetweenState / 1000
	}
}

void function ITS_GameFinished()
{
    ITS_SendRequestToBackend("/api/v1/match/end/" + file.matchId, HttpRequestMethod.PUT, ITS_NO_BODY , ITS_GenericHttpSuccess, ITS_GenericHttpFailure)

    file.matchId = ITS_NO_MATCH

    wait file.config.milliSecBetweenState / 1000 + 0.1

    NS_DisconnectFromWebsocket(ITS_WS_NAME)
    file.isWebsocketRunning = false
}

void function ITS_PlayerConnect( entity player )
{
    if(file.config.milliSecBetweenState < ITS_IGNORE_PLAYER_EVENTS_ON_STATE_DELAY) {//Initlize callbacks
        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.BEGIN_WALLRUN, ITS_PlayerBeginWallrun )
        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.END_WALLRUN, ITS_PlayerEndWallrun )

        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.JUMP, ITS_PlayerJump )
        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.DOUBLE_JUMP, ITS_PlayerDoubleJump )

        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.LEAVE_GROUND, ITS_PlayerLeaveGround )
        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.TOUCH_GROUND, ITS_PlayerTochGround )

        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.MANTLE, ITS_PlayerMantle )

        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.BEGIN_WALLHANG, ITS_PlayerBeginWallHang )
        AddPlayerMovementEventCallback( player, ePlayerMovementEvents.END_WALLHANG, ITS_PlayerEndWallHang )


        AddButtonPressedPlayerInputCallback( player, 1, ITS_StartShoot)
        AddButtonReleasedPlayerInputCallback( player, 1, ITS_EndShoot)

        AddButtonPressedPlayerInputCallback( player, 4, ITS_PlayerBeginCrouch)
        AddButtonReleasedPlayerInputCallback( player, 4, ITS_PlayerEndCrouch)
    }

    table playerConnectEvent
    playerConnectEvent["eventType"] <- "PlayerConnect"
    playerConnectEvent["entityId"] <- player.GetUID()
    playerConnectEvent["playerName"] <-  player.GetPlayerName()
    playerConnectEvent["team"] <- player.GetTeam()
    ITS_SendToWebsocket(EncodeJSON(playerConnectEvent))

    ITS_UpdateITSPosition(player)
}

void function ITS_PlayerDisconnect( entity player )
{
    if(file.config.milliSecBetweenState < ITS_IGNORE_PLAYER_EVENTS_ON_STATE_DELAY) {//Stop callbacks
        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.BEGIN_WALLRUN, ITS_PlayerBeginWallrun )
        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.END_WALLRUN, ITS_PlayerEndWallrun )

        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.JUMP, ITS_PlayerJump )
        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.DOUBLE_JUMP, ITS_PlayerDoubleJump )

        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.LEAVE_GROUND, ITS_PlayerLeaveGround )
        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.TOUCH_GROUND, ITS_PlayerTochGround )

        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.MANTLE, ITS_PlayerMantle )

        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.BEGIN_WALLHANG, ITS_PlayerBeginWallHang )
        RemovePlayerMovementEventCallback( player, ePlayerMovementEvents.END_WALLHANG, ITS_PlayerEndWallHang )

        RemoveButtonPressedPlayerInputCallback( player, 1, ITS_StartShoot)
        RemoveButtonPressedPlayerInputCallback( player, 1, ITS_EndShoot)
    }

    table playerDisconnectEvent
    playerDisconnectEvent["eventType"] <- "PlayerDisconnect"
    playerDisconnectEvent["entityId"] <- player.GetUID()
    ITS_SendToWebsocket(EncodeJSON(playerDisconnectEvent))
}

void function ITS_NpcSpawn(entity npc)
{
    table npcSpawnEvent
    npcSpawnEvent["eventType"] <- "NpcSpawn"
    npcSpawnEvent["entityId"] <- npc.GetEncodedEHandle() + ""
    npcSpawnEvent["entityType"] <- npc.GetClassName()
    npcSpawnEvent["team"] <- npc.GetTeam()

    ITS_SendToWebsocket(EncodeJSON(npcSpawnEvent))
    thread ITS_WaitForNpcDespawn(npc)

    ITS_UpdateITSPosition(npc)
}

void function ITS_NpcWithWeaponSpawn( entity npc )
{
    table npcSpawnEvent
    npcSpawnEvent["eventType"] <- "NpcSpawn"
    npcSpawnEvent["entityId"] <- npc.GetEncodedEHandle() + ""
    npcSpawnEvent["entityType"] <- npc.GetClassName()
    npcSpawnEvent["team"] <- npc.GetTeam()

    if (npc.GetMainWeapons().len() > 0)
    {
        npcSpawnEvent["primary"] <- npc.GetMainWeapons()[0].GetWeaponClassName()
    }

    if (npc.GetMainWeapons().len() > 1)
    {
        npcSpawnEvent["secondary"] <- npc.GetMainWeapons()[1].GetWeaponClassName()
    }

    ITS_SendToWebsocket(EncodeJSON(npcSpawnEvent))
    thread ITS_WaitForNpcDespawn(npc)
}

void function ITS_NpcTitanSpawn(entity npc)
{
    try {
        table npcSpawnEvent
        npcSpawnEvent["eventType"] <- "NpcSpawn"
        npcSpawnEvent["entityId"] <- npc.GetEncodedEHandle() + ""
        npcSpawnEvent["entityType"] <- npc.GetClassName()
        npcSpawnEvent["team"] <- npc.GetTeam()
        npcSpawnEvent["titanClass"] <- GetSoulTitanSubClass( npc.GetTitanSoul() )

        ITS_SendToWebsocket(EncodeJSON(npcSpawnEvent))
        thread ITS_WaitForNpcDespawn(npc)
	} catch(e) {
		//Happens when a pilot dienbarks. NpcSpawnEvent will be triggered by TitanBecomesPilot
	}
}

void function ITS_WaitForNpcDespawn(entity npc)
{
    table event = ITS_CreateGenericEvent("NpcDespawn", npc)

    npc.WaitSignal("OnDestroy")
    ITS_SendToWebsocket(EncodeJSON(event))
}

void function ITS_SpectreLeeched( entity spectre, entity player )
{
    table leachEvent = ITS_CreateGenericEvent("EntityLeached", player)
    leachEvent["spectre"] <- spectre.GetEncodedEHandle() + ""
    ITS_SendToWebsocket(EncodeJSON(leachEvent))
}

void function ITS_EntityKilled( entity victim, entity attacker, var damageInfo )
{
    table entityKillEvent
    entityKillEvent["eventType"] <- "EntityKilled"
    entityKillEvent["damageType"] <- DamageSourceIDToString( DamageInfo_GetDamageSourceIdentifier( damageInfo ) )

    if (attacker.IsPlayer()) {
        entityKillEvent["attackerId"] <- attacker.GetUID()
    } else {
        try
        {
            entityKillEvent["attackerId"] <- attacker.GetEncodedEHandle() + ""
        } catch (exception) {
            entityKillEvent["attackerId"] <- ITS_UNKNOWN
        }
    }

    if (victim.IsPlayer()) {
        entityKillEvent["victimId"] <- victim.GetUID()
    }
    else
    {
        try
        {
            entityKillEvent["victimId"] <- attacker.GetEncodedEHandle() + ""
        } catch (exception) {
            entityKillEvent["victimId"] <- ITS_UNKNOWN
        }
    }
    ITS_SendToWebsocket(EncodeJSON(entityKillEvent))
}

void function ITS_PlayerRespawned( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateGenericEvent("PilotRespawned", player)))
}

void function ITS_PilotBecomesTitan( entity player, entity titan )
{
	table pilotBecomesTitan = ITS_CreateGenericEvent("PilotBecomesTitan", player)
    pilotBecomesTitan["titanClass"] <- GetActiveTitanLoadout( player ).titanClass

    ITS_SendToWebsocket(EncodeJSON(pilotBecomesTitan))
}

void function ITS_TitanBecomesPilot( entity player, entity titan )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateGenericEvent("TitanBecomesPilot", player)))
    ITS_NpcTitanSpawn( titan )
}

void function ITS_PlayerGetsNewPilotLoadout( entity player, PilotLoadoutDef newPilotLoadoutDef )
{
    table newPilotLoadout = ITS_CreateGenericEvent("PilotNewLoadout", player)
    newPilotLoadout["primary"] <- newPilotLoadoutDef.primary
    newPilotLoadout["secondary"] <- newPilotLoadoutDef.secondary
    newPilotLoadout["weapon3"] <- newPilotLoadoutDef.weapon3
    newPilotLoadout["special"] <- newPilotLoadoutDef.special
    ITS_SendToWebsocket(EncodeJSON(newPilotLoadout))
}

void function ITS_EntityRodeoStart( entity ent, entity rodeo )
{
    table rodeoStart = ITS_CreateStateEvent("EntityRodeo", ent, true)
    rodeoStart["rodeoEntityId"] <- ITS_GetEntityId( rodeo )
}

void function ITS_EntityRodeoEnd( entity ent, entity rodeo )
{
    table rodeoEnd = ITS_CreateStateEvent("EntityRodeo", ent, false)
    rodeoEnd["rodeoEntityId"] <- ITS_GetEntityId( rodeo )
}

void function ITS_EntityChangedTeam( entity ent )
{
    table entityChangedTeam = ITS_CreateGenericEvent("EntityChangedTeam", ent)

    entityChangedTeam["team"] <- ent.GetTeam()

    ITS_SendToWebsocket(EncodeJSON(entityChangedTeam))
}


void function ITS_PlayerBeginWallrun( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerWallRunning", player, true)))
}

void function ITS_PlayerEndWallrun( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerWallRunning", player, false)))
}

void function ITS_StartShoot( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerShooting", player, true)))
}

void function ITS_EndShoot( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerShooting", player, false)))
}

void function ITS_PlayerJump( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateGenericEvent("PlayerJump", player)))
}

void function ITS_PlayerDoubleJump( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateGenericEvent("PlayerDoubleJump", player)))
}

void function ITS_PlayerLeaveGround( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerGrounded", player, false)))
}

void function ITS_PlayerTochGround( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerGrounded", player, true)))
}

void function ITS_PlayerMantle( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateGenericEvent("PlayerMantle", player)))
}

void function ITS_PlayerBeginWallHang( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerHanging", player, true)))
}

void function ITS_PlayerEndWallHang( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerHanging", player, false)))
}

void function ITS_PlayerBeginCrouch( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerCrouching", player, true)))
}

void function ITS_PlayerEndCrouch( entity player )
{
    ITS_SendToWebsocket(EncodeJSON(ITS_CreateStateEvent("PlayerCrouching", player, false)))
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Util Functions which require gamestate
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void function ITS_KILL_SCORE_EVENT( entity victim, entity attacker, var damageInfo )
{
	// Basic checks
	if ( victim == attacker || !( attacker.IsPlayer() || attacker.IsTitan() ) || GetGameState() != eGameState.Playing )
		return

	// NPC titans without an owner player will not count towards any team's score
	if ( attacker.IsNPC() && attacker.IsTitan() && !IsValid( GetPetTitanOwner( attacker ) ) )
    {
        if (victim.IsPlayer())
        {
            ITS_SCORE_EVENT(victim, PGS_DEATHS)
        }
        return
    }


	// Handle AI, marvins aren't setup so we check for them to prevent crash
	if ( victim.IsNPC() && victim.GetClassName() != "npc_marvin" )
	{
        ITS_SCORE_EVENT(attacker, PGS_NPC_KILLS)
	}

	if ( victim.IsPlayer() )
    {
		ITS_SCORE_EVENT(attacker, PGS_PILOT_KILLS)
        ITS_SCORE_EVENT(victim, PGS_DEATHS)
	}


	// Player ejecting triggers this without the extra check
	if ( victim.IsTitan() && victim.GetBossPlayer() != attacker )
    {
        ITS_SCORE_EVENT(attacker, PGS_TITAN_KILLS)
    }

    // Assist
    table<int, bool> alreadyAssisted
    foreach( DamageHistoryStruct attackerInfo in victim.e.recentDamageHistory )
    {
        if ( !IsValid( attackerInfo.attacker ) || !attackerInfo.attacker.IsPlayer() || attackerInfo.attacker == victim )
                    continue

        if( attackerInfo.attacker != attacker && !( attackerInfo.attacker.GetEncodedEHandle() in alreadyAssisted ) )
        {
            alreadyAssisted[attackerInfo.attacker.GetEncodedEHandle()] <- true
            ITS_SCORE_EVENT(attacker, PGS_ASSISTS)
        }
    }
}

void function ITS_SCORE_EVENT( entity player, int pgs )
{
    if (player in  file.scoreData) {
        if (pgs in file.scoreData[player]) {
            file.scoreData[player][pgs] <- file.scoreData[player][pgs]++
        }
        else
        {
            file.scoreData[player][pgs] <- 1
        }
    }
}

void function ITS_Score_GameFinished()
{
    int winningTeam = GetWinningTeam();

	foreach( entity player in GetPlayerArray() )
    {
        table matchResult
        matchResult["eventType"] <- "MatchResult"
        matchResult["entityId"] <- player.GetUID()
        matchResult["hasWon"] <- player.GetTeam() == winningTeam

        foreach( int key, string value in ITS_GAME_STAT_TYPES )
        {
            int val = player.GetPlayerGameStat( key );
            if (val != 0) {
                matchResult[value] <- val
            }
            else
            {
                if (player in file.scoreData && key in file.scoreData[player]) {
                    matchResult[value] <- file.scoreData[player][key]
                }
            }
        }
        ITS_SendToWebsocket( EncodeJSON(matchResult) )
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Util Functions which require gamestate
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void function ITS_SendToWebsocket(string body)
{
    if ( file.isWebsocketRunning)
    {
        NS_WriteToWebsocket(ITS_WS_NAME, body)
    }
}

ITS_Position function ITS_UpdateITSPosition(entity ent)
{
    ITS_Position position
    position.origin = ent.GetOrigin()
    position.angles = ent.GetAngles()


    file.lastReportedPosition[ITS_GetEntityId(ent)] <- position
    return position
}

bool function ITS_ComparePositions(entity ent)
{
    ITS_Position originalPosition

    try {
        originalPosition = file.lastReportedPosition[ITS_GetEntityId(ent)]
    } catch(e) { //This can happen when the entity doesn't get added fast enough to the map
        ITS_UpdateITSPosition(ent)
        return true
    }
    ITS_Position newPosition = ITS_UpdateITSPosition(ent)

    if (!ITS_InRange(originalPosition.origin.x, newPosition.origin.x, 5)) {
        return true
    }
    if (!ITS_InRange(originalPosition.origin.y, newPosition.origin.y, 5)) {
        return true
    }
    if (!ITS_InRange(originalPosition.origin.z, newPosition.origin.z, 5)) {
        return true
    }

    //Ignoring X and Z due to it not being used by the player.angles
    if (!ITS_InRange(originalPosition.angles.y, newPosition.angles.y, 1)) {
        return true
    }
    return false
}

void function ITS_GenericHttpFailure(HttpRequestFailure faluire )
{
    file.isClientCompatible = false
    file.matchId = ITS_NO_MATCH

    wait file.config.milliSecBetweenState / 1000 + 0.1

    NS_DisconnectFromWebsocket(ITS_WS_NAME)
}

function ITS_TableValuesToArray( tab )
{
	Assert( type( tab ) == "table", "Not a table" )

	local resultArray = []
	resultArray.resize( tab.len() )
	int currentArrayIndex = 0
	foreach ( key, val in tab )
	{
		resultArray[ currentArrayIndex ] = val
		++currentArrayIndex
	}

	return resultArray
}

bool function ITS_InRange(float num1, float num2, float range_threshold)
{
    return num1 - num2 <= range_threshold && num2 - num1 <= range_threshold
}